Javascript
JavaScript is a high-level, dynamic, interpreted programming language that is widely used for creating interactive web pages and web applications

what is interpreted language
interpreted languages are not compiled into machine code before execution. Instead, 
an interpreter reads and executes the code directly.The interpreter translates the 
source code line by line into machine code as it runs.Examples of interpreted languages are Python, Ruby, and JavaScript.

what is compliation language
In compiled languages, the code is transformed into machine code (binary) by a compiler before execution.
 This compiled code can be executed directly by the computer's processor without further translation. 
Examples of compiled languages are C, C++, Java, and Go.

summary, compiled languages are faster and more efficient,
provide better memory management, and higher security. Interpreted languages are more portable,
provide dynamic typing, easier debugging, and allow for rapid development.

JavaScript Display possiblities

Writing into an HTML element, using innerHTML.
Writing into the HTML output using document.write().
Writing into an alert box, using window.alert().
Writing into the browser console, using console.log().

javascript statement

It's a combination of expression
below example contains varibale expression & nameexprsion &
assignment expression & number exprssion and airthmatic expression
ex:- let a = 1 * 3;

; semicolon in javascript separate JavaScript statements

javascript removes unnesssary space automatically

JavaScript White Space
JavaScript ignores multiple spaces. You can add white space to your script to make it more readable.

JavaScript Line Length and Line Breaks
For best readability, programmers often like to avoid code lines longer than 80 characters.

javascript expression
JavaScript, an expression is a piece of code that represents a value. It can be a combination of variables,
numbers, strings, functions, and operators that produce a result. 
For example, 2 + 3 is an expression that evaluates to the value 5, and "Hello, " + name is an expression that evaluates 
to a string that includes the value of the variable name.


JavaScript Syntax

The JavaScript syntax defines two types of values:

Fixed values
Variable values
Fixed values are called Literals.

Variable values are called Variables.
JavaScript Literals
The two most important syntax rules for fixed values are:

1. Numbers are written with or without decimals:
2. Strings are text, written within double or single quotes:


JavaScript Variables
In a programming language, variables are used to store data values.
JavaScript uses the keywords var, let and const to declare variables.

JavaScript Operators
JavaScript uses arithmetic operators ( + - * / ) to compute values:
JavaScript uses an assignment operator ( = ) to assign values to variables:

JavaScript Expressions
An expression is a combination of values, variables, and operators, which computes to a value.

The computation is called an evaluation.

For example, 5 * 10 evaluates to 50:

JavaScript Comments
Not all JavaScript statements are "executed".

Code after double slashes // or between /* and */ is treated as a comment.

Comments are ignored, and will not be executed:


JavaScript Identifiers / Names
Identifiers are JavaScript names.

Identifiers are used to name variables and keywords, and functions.

The rules for legal names are the same in most programming languages.

A JavaScript name must begin with:

A letter (A-Z or a-z)
A dollar sign ($)
Or an underscore (_)


JavaScript is Case Sensitive

JavaScript and Camel Case
Historically, programmers have used different ways of joining multiple words into one variable name:

Hyphens:

first-name, last-name, master-card, inter-city.

Underscore:

first_name, last_name, master_card, inter_city.

Upper Camel Case (Pascal Case):

FirstName, LastName, MasterCard, InterCity.

Lower Camel Case:

JavaScript programmers tend to use camel case that starts with a lowercase letter:

firstName, lastName, masterCard, interCity.

JavaScript Comments

JavaScript comments can be used to explain JavaScript code, and to make it more readable.
JavaScript comments can also be used to prevent execution, when testing alternative code.

Single Line Comments
Single line comments start with //.

Any text between // and the end of the line will be ignored by JavaScript (will not be executed

Multi-line Comments
Multi-line comments start with /* and end with */.

Any text between /* and */ will be ignored by JavaScript.

This example uses a multi-line comment (a comment block) to explain the code